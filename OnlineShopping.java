import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.UUID; // For generating unique IDs

// User.java
class User {
    private String userId;
    private String name;
    private String email;
    private String password; // In a real app, this would be a hashed password
    private Account account; // 1-to-1 relationship with Account
    private Cart cart;       // 1-to-1 relationship with Cart
    private List<Order> orders; // 1-to-many relationship with Order

    public User(String userId, String name, String email, String password) {
        this.userId = userId;
        this.name = name;
        this.email = email;
        this.password = password;
        this.orders = new ArrayList<>();
    }

    // Getters
    public String getUserId() { return userId; }
    public String getName() { return name; }
    public String getEmail() { return email; }
    public String getPassword() { return password; } // Be cautious with direct password access in real apps
    public Account getAccount() { return account; }
    public Cart getCart() { return cart; }
    public List<Order> getOrders() { return orders; }

    // Setters for relationships (usually set during creation or initialization)
    public void setAccount(Account account) { this.account = account; }
    public void setCart(Cart cart) { this.cart = cart; }

    // Operations
    public void createAccount() {
        if (this.account == null) {
            // In a real system, accountId would be generated by Account itself or a manager
            String newAccountId = "ACC-" + UUID.randomUUID().toString().substring(0, 8);
            this.account = new Account(newAccountId, new Date());
            this.account.addUser(this); // Link back to user
            System.out.println("Account created for " + this.name + " with ID: " + newAccountId);
        } else {
            System.out.println(this.name + " already has an account.");
        }
    }

    public boolean login(String enteredUserId, String enteredPassword) {
        if (this.userId.equals(enteredUserId) && this.password.equals(enteredPassword)) {
            System.out.println(this.name + " logged in successfully.");
            return true;
        }
        System.out.println("Login failed for " + enteredUserId + ": Invalid credentials.");
        return false;
    }

    public void logout() {
        System.out.println(this.name + " logged out.");
    }

    public Order placeOrder(String shippingAddress) {
        if (this.cart == null || this.cart.getProducts().isEmpty()) {
            System.out.println(this.name + ": Cannot place order, cart is empty.");
            return null;
        }

        // Check product stock before placing order
        for (Product p : this.cart.getProducts()) {
            // Assuming 1 quantity for each product in cart for simplicity in this demo
            if (p.getStockQuantity() < 1) {
                System.out.println("Error: " + p.getName() + " is out of stock. Cannot place order.");
                return null;
            }
        }

        String orderId = "ORD-" + UUID.randomUUID().toString().substring(0, 8);
        Date orderDate = new Date();
        float totalAmount = this.cart.calculateTotal();

        Order newOrder = new Order(orderId, this, new ArrayList<>(this.cart.getProducts()), totalAmount, orderDate, shippingAddress);
        this.orders.add(newOrder); // Add order to user's list of orders

        // Decrease stock for each product in the order
        for (Product p : this.cart.getProducts()) {
            p.removeStock(1); // Assuming 1 unit removed per product for this simple cart
        }

        this.cart.clearCart(); // Clear cart after placing order
        System.out.println(this.name + " placed order " + orderId + " for $" + String.format("%.2f", totalAmount));
        return newOrder;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(userId, user.userId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userId);
    }
}

// Account.java
class Account {
    private String accountId;
    private Date createdDate;
    private User user; // 1-to-1 relationship with User (manages)

    public Account(String accountId, Date createdDate) {
        this.accountId = accountId;
        this.createdDate = createdDate;
    }

    // Getters
    public String getAccountId() { return accountId; }
    public Date getCreatedDate() { return createdDate; }
    public User getUser() { return user; }

    // Operations
    public void addUser(User user) {
        if (this.user == null) {
            this.user = user;
            System.out.println("User " + user.getName() + " linked to account " + this.accountId);
        } else {
            System.out.println("Account " + this.accountId + " already has a user.");
        }
    }

    public void removeUser(User userToRemove) {
        if (this.user != null && this.user.equals(userToRemove)) {
            this.user = null;
            System.out.println("User " + userToRemove.getName() + " removed from account " + this.accountId);
        } else {
            System.out.println("User " + userToRemove.getName() + " is not associated with account " + this.accountId);
        }
    }
}

// Cart.java
class Cart {
    private String cartId;
    private List<Product> products; // 0-to-many relationship with Product (contains)
    private User user; // 1-to-1 relationship with User (owns)

    public Cart(String cartId, User user) {
        this.cartId = cartId;
        this.user = user;
        this.products = new ArrayList<>();
    }

    // Getters
    public String getCartId() { return cartId; }
    public List<Product> getProducts() { return products; }
    public User getUser() { return user; }

    // Operations
    public void addProduct(Product product) {
        this.products.add(product);
        System.out.println(product.getName() + " added to cart " + this.cartId);
    }

    public void removeProduct(Product product) {
        if (this.products.remove(product)) {
            System.out.println(product.getName() + " removed from cart " + this.cartId);
        } else {
            System.out.println(product.getName() + " not found in cart " + this.cartId);
        }
    }

    public float calculateTotal() {
        float total = 0.0f;
        for (Product product : products) {
            total += product.getPrice();
        }
        System.out.println("Cart total: $" + String.format("%.2f", total));
        return total;
    }

    public void clearCart() {
        this.products.clear();
        System.out.println("Cart " + this.cartId + " cleared.");
    }
}

// Product.java
class Product {
    private String productId;
    private String name;
    private String description;
    private float price;
    private int stockQuantity;

    public Product(String productId, String name, String description, float price, int stockQuantity) {
        this.productId = productId;
        this.name = name;
        this.description = description;
        this.price = price;
        this.stockQuantity = stockQuantity;
    }

    // Getters
    public String getProductId() { return productId; }
    public String getName() { return name; }
    public String getDescription() { return description; }
    public float getPrice() { return price; }
    public int getStockQuantity() { return stockQuantity; }

    // Operations
    public void addStock(int quantity) {
        if (quantity > 0) {
            this.stockQuantity += quantity;
            System.out.println(quantity + " units of " + this.name + " added. New stock: " + this.stockQuantity);
        } else {
            System.out.println("Cannot add non-positive quantity.");
        }
    }

    public void removeStock(int quantity) {
        if (quantity > 0 && this.stockQuantity >= quantity) {
            this.stockQuantity -= quantity;
            System.out.println(quantity + " units of " + this.name + " removed. New stock: " + this.stockQuantity);
        } else if (quantity > 0 && this.stockQuantity < quantity) {
            System.out.println("Not enough stock for " + this.name + ". Current stock: " + this.stockQuantity);
        } else {
            System.out.println("Cannot remove non-positive quantity.");
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Product product = (Product) o;
        return Objects.equals(productId, product.productId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productId);
    }
}

// Order.java
class Order {
    private String orderId;
    private User user; // 1-to-1 relationship with User (places)
    private List<Product> products; // 0-to-many relationship with Product (includes)
    private float totalAmount;
    private Date orderDate;
    private String shippingAddress;
    private Shipping shipping; // 1-to-1 relationship with Shipping (has)

    public Order(String orderId, User user, List<Product> products, float totalAmount, Date orderDate, String shippingAddress) {
        this.orderId = orderId;
        this.user = user;
        this.products = new ArrayList<>(products); // Create a new list to avoid modifying the original cart list
        this.totalAmount = totalAmount;
        this.orderDate = orderDate;
        this.shippingAddress = shippingAddress;
    }

    // Getters
    public String getOrderId() { return orderId; }
    public User getUser() { return user; }
    public List<Product> getProducts() { return products; }
    public float getTotalAmount() { return totalAmount; }
    public Date getOrderDate() { return orderDate; }
    public String getShippingAddress() { return shippingAddress; }
    public Shipping getShipping() { return shipping; }

    // Setter for Shipping (set when shipping is initiated)
    public void setShipping(Shipping shipping) { this.shipping = shipping; }

    // Operations
    public void placeOrder() {
        System.out.println("Order " + orderId + " placed by " + user.getName() + " on " + orderDate + " for $" + String.format("%.2f", totalAmount));
        System.out.println("Shipping to: " + shippingAddress);
        // In a real system, this would trigger payment processing, inventory updates, etc.
    }

    public void cancelOrder() {
        System.out.println("Order " + orderId + " cancelled.");
        // In a real system, this would involve refunding, returning stock, updating status.
        // For simplicity, let's just reverse the stock removal
        for (Product p : this.products) {
            p.addStock(1); // Assuming 1 unit was removed per product when ordered
        }
        if (this.shipping != null) {
            this.shipping.updateStatus("Cancelled");
        }
    }
}

// Shipping.java
class Shipping {
    private String shippingId;
    private Order order; // 1-to-1 relationship with Order (tracks)
    private String status; // e.g., "Pending", "Shipped", "Delivered", "Cancelled"
    private Date shippedDate;
    private String trackingNumber;

    public Shipping(String shippingId, Order order) {
        this.shippingId = shippingId;
        this.order = order;
        this.status = "Pending"; // Initial status
    }

    // Getters
    public String getShippingId() { return shippingId; }
    public Order getOrder() { return order; }
    public String getStatus() { return status; }
    public Date getShippedDate() { return shippedDate; }
    public String getTrackingNumber() { return trackingNumber; }

    // Operations
    public void shipOrder() {
        this.status = "Shipped";
        this.shippedDate = new Date();
        this.trackingNumber = "TRACK-" + UUID.randomUUID().toString().substring(0, 8);
        System.out.println("Order " + order.getOrderId() + " shipped with status: " + status);
        System.out.println("Tracking Number: " + trackingNumber + " (Shipped on: " + shippedDate + ")");
    }

    public void updateStatus(String newStatus) {
        this.status = newStatus;
        System.out.println("Shipping status for " + order.getOrderId() + " updated to: " + newStatus);
    }
}

// Main class to demonstrate the Online Shopping System
public class OnlineShoppingSystem {
    public static void main(String[] args) {
        // --- 1. Create Users ---
        User alice = new User("U001", "Alice Smith", "alice@example.com", "pass123");
        User bob = new User("U002", "Bob Johnson", "bob@example.com", "securepwd");

        // --- 2. Create Accounts (managed by User in this diagram) ---
        alice.createAccount();
        bob.createAccount();

        // --- 3. Create Products ---
        Product laptop = new Product("P001", "Gaming Laptop", "High-performance laptop for gaming", 1200.00f, 5);
        Product mouse = new Product("P002", "Wireless Mouse", "Ergonomic wireless mouse", 25.50f, 10);
        Product keyboard = new Product("P003", "Mechanical Keyboard", "RGB Mechanical Keyboard", 80.00f, 3);
        Product monitor = new Product("P004", "4K Monitor", "27-inch 4K UHD Monitor", 350.00f, 0); // Out of stock

        // --- 4. Alice's Shopping Journey ---
        System.out.println("\n--- Alice's Shopping ---");
        // Alice gets a cart
        Cart aliceCart = new Cart("C001", alice);
        alice.setCart(aliceCart); // Link cart to user

        // Alice adds products to her cart
        aliceCart.addProduct(laptop);
        aliceCart.addProduct(mouse);
        aliceCart.calculateTotal();

        // Alice places an order
        Order aliceOrder = alice.placeOrder("123 Main St, Anytown, USA");
        if (aliceOrder != null) {
            aliceOrder.placeOrder();
            // Simulate shipping the order
            Shipping aliceShipping = new Shipping("S001", aliceOrder);
            aliceOrder.setShipping(aliceShipping); // Link shipping to order
            aliceShipping.shipOrder();
            aliceShipping.updateStatus("In Transit");
        }

        System.out.println("\n--- Bob's Shopping ---");
        // Bob gets a cart
        Cart bobCart = new Cart("C002", bob);
        bob.setCart(bobCart);

        // Bob adds products to his cart, including an out-of-stock item
        bobCart.addProduct(keyboard);
        bobCart.addProduct(monitor); // Monitor is out of stock
        bobCart.calculateTotal();

        // Bob tries to place an order with an out-of-stock item
        Order bobOrder = bob.placeOrder("456 Oak Ave, Otherville, USA"); // This should fail due to monitor being out of stock
        if (bobOrder != null) {
            System.out.println("Bob's order was placed, surprisingly."); // This message should not appear if logic is correct
        }

        // Bob removes the out-of-stock item and tries again
        System.out.println("\nBob removing out-of-stock item and re-ordering:");
        bobCart.removeProduct(monitor);
        bobCart.calculateTotal();
        bobOrder = bob.placeOrder("456 Oak Ave, Otherville, USA");
        if (bobOrder != null) {
            bobOrder.placeOrder();
            // Simulate shipping
            Shipping bobShipping = new Shipping("S002", bobOrder);
            bobOrder.setShipping(bobShipping);
            bobShipping.shipOrder();
        }

        System.out.println("\n--- Post-Order Actions ---");
        System.out.println("Current stock of Gaming Laptop: " + laptop.getStockQuantity());
        System.out.println("Current stock of Mechanical Keyboard: " + keyboard.getStockQuantity());

        // Simulate order cancellation
        System.out.println("\n--- Order Cancellation ---");
        if (aliceOrder != null) {
            aliceOrder.cancelOrder();
            System.out.println("Current stock of Gaming Laptop after cancellation: " + laptop.getStockQuantity());
        }

        // Demonstrate stock addition
        System.out.println("\n--- Stock Management ---");
        laptop.addStock(10);
        System.out.println("New stock of Gaming Laptop: " + laptop.getStockQuantity());
    }
}
